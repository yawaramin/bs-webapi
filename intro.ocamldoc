{!indexlist}
{!modules: Yawaramin_BsWebapi}

BuckleScript bindings to the
{{: https://developer.mozilla.org/en-US/docs/Web/API} Web API}.

These bindings are organised into modules that correspond to the API
class hierarchy. All modules in the hierarchy share a common
[EventTarget] modelled as an abstract type. If you have a value of, say,
an [HTMLElement], you will be able to manipulate it with the relevant
functions in all the modules which represent its supertypes in the
hierarchy--so, [Element], [Node], and [EventTarget].

This means that you can, for example, directly add an event listener to
any HTML element just by using the
{!val:Yawaramin_BsWebapi_EventTarget.addEventListener} function. You can
also {i downcast} a value to a subtype and then call the relevant
functions with that. Downcasting is done safely (by checking if the value
you provided supports a crucial property of the type you want) so you
will always have to account for possible failure to downcast.

Hopefully, this type safety also translates to errors that are easier to
understand. For example:

{v We've found a bug for you!
  /Users/yawar/src/bs-webapi/src/Yawaramin_BsWebapi_Test.ml 4:25-30

  1 | module Web = Yawaramin_BsWebapi
  2 | let test (target: Web.EventTarget.this Web.Common.t): int =
  3 |   Web.Element.className target

  This has type:
    Web.EventTarget.this Web.Common.t (defined as
      Web.EventTarget.this Yawaramin_BsWebapi_Common.t)
  But somewhere wanted:
    ([> Web.Element.this ] as 'a) Web.Element.subtype (defined as
      'a Yawaramin_BsWebapi_Common.t)

  The incompatible parts:
    Web.EventTarget.this (defined as [ `eventTarget ])
    vs
    'a (defined as [> `element | `eventTarget | `node ])
  The first variant type does not allow tag(s) `element, `node v}

We would read this as: 'this has type "EventTarget Common", but somewhere
wanted "Element subtype" '. In other words, we have only an
[EventTarget], but the operation we are trying to do requires an
[Element].
